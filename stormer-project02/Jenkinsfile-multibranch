PATH="stormer-project02"

pipeline {
    agent {
     label ("node1")
            }
  environment {
		DOCKERHUB_CREDENTIALS=credentials('dockerhub')
	}
options {
    buildDiscarder(logRotator(numToKeepStr: '20'))
    disableConcurrentBuilds()
    timeout (time: 60, unit: 'MINUTES')
    timestamps()
  }
	

    stages {





    stage('Login') {

			steps {
				sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
			}
		}

        stage('clean env') {
            steps {
                sh '''
            docker system prune -fa || true
                '''
            }
        }

        

        stage('Test golang') {
	      agent {
            docker {
              image 'golang:1.20.1'
              args '-u 0:0'
            }
           }
            steps {
                sh '''
            cd $WORKSPACE/stormer-project02/src/catalog/
            go test
                '''
            }
        }




        stage('Test maven-cart') {
	     agent {
            docker {
              image 'maven:3.8.7-openjdk-18'
            }
           }
            steps {
                sh '''
            cd $WORKSPACE/stormer-project02/src/cart/
            mvn  test  -Dmaven.test.skip=true --quiet 

                '''
            }
        }


        stage('Test maven-orders') {
	      agent {
            docker {
              image 'maven:3.8.7-openjdk-18'
            }
           }
            steps {
                sh '''
            cd $WORKSPACE/stormer-project02/src/orders/
            mvn   test -Dmaven.test.skip=true --quiet 
                '''
            }
        }


        stage('Test maven-ui') {
	      agent {
            docker {
              image 'maven:3.8.7-openjdk-18'
            }
           }
            steps {
                sh '''
            cd $WORKSPACE/stormer-project02/src/ui/
            mvn  test -Dmaven.test.skip=true --quiet 
                '''
            }
        }

        stage('Test maven-node') {
	      agent {
            docker {
              image 'node'
            }
           }
            steps {
                sh '''
            cd $WORKSPACE/stormer-project02/src/checkout/
            npm install 
                '''
            }
        }


         stage('SonarQube analysis') {
            agent {
                docker {
                  image 'sonarsource/sonar-scanner-cli:4.8.0'
                }
               }
               environment {
        CI = 'true'
        scannerHome='/opt/sonar-scanner'
    }
            steps{
                withSonarQubeEnv('Sonar') {
                    sh "${scannerHome}/bin/sonar-scanner"
                }
            }
        }





        stage('Build golang') {
	      agent {
            docker {
              image 'golang'
              args '-u 0:0'
            }
           }
            steps {
                sh '''
            cd $WORKSPACE/stormer-project02/src/catalog/
            go build   -buildvcs=false
                '''
            }
        }




        stage('Build maven-cart') {

            steps {
                sh '''
cd $WORKSPACE/stormer-project02/src/cart/
docker run -i -v $PWD:/maven -w /maven maven:3.8.7-openjdk-18  mvn  package -Dmaven.test.skip=true --quiet  
 ls -l
               '''
            }
        }
       


        stage('Build maven-orders') {
            steps {
                sh '''
cd $WORKSPACE/stormer-project02/src/orders/
docker run -i -v $PWD:/maven -w /maven maven:3.8.7-openjdk-18  mvn  package -Dmaven.test.skip=true --quiet  
'''
            }
        }





stage('Build-images-ui') {
            steps {
                sh '''
cd $WORKSPACE/stormer-project02/src/ui/
docker build -t  devopseasylearning2021/ui:jenkins-$BUILD_NUMBER .
                '''
            }
        }

stage('Build-images-orders') {
            steps {
                sh '''
cd $WORKSPACE/stormer-project02/src/orders/
docker build  -t devopseasylearning2021/orders:jenkins-$BUILD_NUMBER .
docker build -f Dockerfile-rabbitmq  -t devopseasylearning2021/orders-rabbitmq:jenkins-$BUILD_NUMBER .
docker build -f Dockerfile-mysql  -t devopseasylearning2021/orders-mysql:jenkins-$BUILD_NUMBER .
                '''
            }
        }

stage('Build-images-checkout') {
            steps {
                sh '''
cd $WORKSPACE/stormer-project02/src/checkout/
docker build -t  devopseasylearning2021/checkout:jenkins-$BUILD_NUMBER .
docker build -f Dockerfile-redis  -t devopseasylearning2021/checkout-redis:jenkins-$BUILD_NUMBER .
                '''
            }
        }



stage('Build-images-cart') {
            steps {
                sh '''
cd $WORKSPACE/stormer-project02/src/cart/
docker build -t  devopseasylearning2021/cart:jenkins-$BUILD_NUMBER .
docker build -f Dockerfile-dynamodb -t devopseasylearning2021/cart-dynamodb:jenkins-$BUILD_NUMBER .
                '''
            }
        }



stage('Build-images-catalog') {
            steps {
                sh '''
cd $WORKSPACE/stormer-project02/src/catalog/
docker build -t  devopseasylearning2021/catalog:jenkins-$BUILD_NUMBER .
docker build -f Dockerfile-mysql -t devopseasylearning2021/catalog-mysql:jenkins-$BUILD_NUMBER .
                '''
            }
        }

stage('Build-images-assets') {
            steps {
                sh '''
cd $WORKSPACE/stormer-project02/src/assets/
docker build -t  devopseasylearning2021/assets:jenkins-$BUILD_NUMBER .
cd $WORKSPACE
                '''
            }
        }



    }


   post {
   
   success {
      slackSend (channel: '#development-alerts', color: 'good', message: "SUCCESSFUL: Application STORMER  Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
    }

 
    unstable {
      slackSend (channel: '#development-alerts', color: 'warning', message: "UNSTABLE: Application STORMER  Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
    }

    failure {
      slackSend (channel: '#development-alerts', color: '#FF0000', message: "FAILURE: Application STORMER Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
    }
   
    cleanup {
      deleteDir()
    }
}

}

